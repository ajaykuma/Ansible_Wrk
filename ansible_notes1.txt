Setup Ansible
--------------

--Setup multiple Linux machines (ubuntu/centos)
  For ubuntu:
  - apt update (to update each machine)
  - setup NAT/Host only adaptor for communication across machines using different IP addresses

Ansible is not installed by default on Ubuntu, but you can easily install it using APT (default package manager) or PPA (Personal Package Archive).

Install Ansible from Ubuntu Repositories (Recommended for Stability)
- Ubuntu 22.04 provides Ansible in its official repositories.

- update package lists:
  sudo apt update

- Install ansible
  sudo apt install -y ansible

- Verify installation
  ansible --version

root@m1:~# ansible --version
ansible 2.9.6
  config file = /etc/ansible/ansible.cfg
  configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python3/dist-packages/ansible
  executable location = /usr/bin/ansible
  python version = 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]

Install the Latest Ansible Version from PPA (For Latest Features)
- Add the Ansible PPA

sudo apt update
sudo apt install -y software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible

- Install Ansible
sudo apt install -y ansible

ansible --version

Install Ansible Using pip (For a Specific Version)
- install Ansible via pip (Python package manager)

- Install python and pip
sudo apt install -y python3 python3-pip

- Install Ansible using pip
pip3 install --user ansible

- Add ansible to system PATH
echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
source ~/.bashrc

ansible --version

#Post-Installation Configuration

- Check Ansible Modules & Plugins
ansible-doc -l | less

- Configure an Inventory File (/etc/ansible/hosts)
sudo nano /etc/ansible/hosts

- Add the following
[web_servers]
192.168.1.10
192.168.1.11

- Test Connection to a Remote Host
ansible all -m ping -i /etc/ansible/hosts

----------------------------------------------------------
#Shortcut to comment or uncomment a block of code
#ctrl + k + c
#ctrl + k + u
Task 1: Login as 'ans' user and being in home directory

--setup ssh access to your host 
ssh-keygen -t rsa -P ""
cat $HOME/,ssh/id_rsa.pub >> $HOME/.ssh/authorized_keys

--Test ssh to your host such as 
ssh ans@m1

--setup 'hosts.ini' file containing
[my-host]
172.28.78.1 ansible_ssh_private_key_file=home/ans/.ssh/id_rsa

--setup 'vm-setup-exmpl.yml' file containing your instructions

--Run your playbook
ans@m1:~/Downloads/Ansible_Wrk$ ansible-playbook -i Inventory/hosts.ini Setup_tasks/vm-setup-exmpl.yml

--If it complains/fails needing root pswd "msg": "Missing sudo password" which means
--the Ansible playbook requires become: yes (sudo privileges), but Ansible is not getting the sudo password.

Option 1: Provide the Sudo Password Interactively
ans@m1:~/Downloads/Ansible_Wrk$ ansible-playbook -i Inventory/hosts.ini Setup_tasks/vm-setup-exmpl.yml --ask-become-pass

Option 2: Add the Sudo Password to the Ansible Vault (Secure)
You can store the sudo password in an Ansible Vault-encrypted file and use it in the playbook:
--Create a vault file:
ansible-vault create sudo_password.yml

--Add the following content
ansible_become_pass: "your_sudo_password"

--Use the vault file in your playbook
ansible-playbook -i inventory_file playbook.yml --extra-vars "@sudo_password.yml" --ask-vault-pass

Option 3:
Set Up a Passwordless Sudo User (Best for Automation)
--to make ssh access password less
sudo visudo
ans ALL=(ALL) NOPASSWD: ALL
<save>

Now, run the playbook without requiring a sudo password.

-----------------------------------------------------
Task 2: Running setup task for a remote machine
On machine2 i.e. m2 
Login as 'ans' user and being in home directory

--Generate ssh keys
ssh-keygen -t rsa -P ""

--Copy ssh public keys to itself and to other machine
cat $HOME/.ssh/id_rsa.pub >> $HOME/.ssh/authorized_keys
ssh-copy-id -i $HOME/.ssh/id_rsa.pub ans@m1

--from m1
ssh-copy-id -i $HOME/.ssh/id_rsa.pub ans@m2

--Test ssh access from each machine to other machine

--Now update the hosts.ini file to point to remote server

--check on remote machine if it has
  Python installed
  Any directory such as /opt/my_venv
  If pip installed?

--Now run the ansible playbook to setup 
ansible-playbook -i Inventory/hosts.ini Setup_tasks/vm-setup-exmpl.yml --ask-become-pass

--Check for output
------------------------------------------------------------
Task 3: Running playbook pointing to a role that has one or more tasks
--Create or modify your project structure

Ansible_Wrk
  Inventory
    vm-setup-playbook
      hosts.ini
  roles
    python
      tasks
        main.yml
    README.MD
    setup-playbook.yml

--Here main.yml contains
- name: Create directory
  file:
    path: /home/ans/mydata
    state: directory

- name: install apache2
  become: yes
  apt: name=apache2 update_cache=yes state=latest

#Start & enable a Service/server
- name: Start and enable nginx
  service:
    name: apache2
    state: started
    enabled: yes

--and setup-playbook.yml contains
---
- name: Example ansible playbook
  hosts: all
  remote_user: ans
  roles:
   - python

--Now run the playbook
ansible-playbook -i Inventory/hosts.ini roles/setup-playbook.yml --ask-become-pass

----Output-----
PLAY [Example ansible playbook] **********************************************************************************************************************

TASK [Gathering Facts] *******************************************************************************************************************************
ok: [172.28.78.1]

TASK [python : Create directory] *********************************************************************************************************************
ok: [172.28.78.1]

TASK [python : install apache2] **********************************************************************************************************************
changed: [172.28.78.1]

TASK [python : Start and enable nginx] ***************************************************************************************************************
ok: [172.28.78.1]

PLAY RECAP *******************************************************************************************************************************************
172.28.78.1                : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

ans@m1:~/Downloads/Ansible_Wrk$ service apache2 status
● apache2.service - The Apache HTTP Server
     Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
     Active: active (running) since Thu 2025-03-20 19:48:03 CET; 41s ago
       Docs: https://httpd.apache.org/docs/2.4/
   Main PID: 4328 (apache2)
      Tasks: 55 (limit: 5784)
     Memory: 4.8M
     CGroup: /system.slice/apache2.service
             ├─4328 /usr/sbin/apache2 -k start
             ├─4329 /usr/sbin/apache2 -k start
             └─4330 /usr/sbin/apache2 -k start

Mär 20 19:48:03 m1 systemd[1]: Starting The Apache HTTP Server...
Mär 20 19:48:03 m1 apachectl[4327]: AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.28.78.1. Set t>
Mär 20 19:48:03 m1 systemd[1]: Started The Apache HTTP Server.


----Output ends----
------------------------------------------------------------
Task 4: Update the main.yml
--comment out apache2 installation
--add command to check status
#- name: install apache2
#  become: yes
#  apt: name=apache2 update_cache=yes state=latest

#Start & enable a Service/server
- name: Start and enable apache2
  service:
    name: apache2
    state: started
    enabled: yes

#check status of service and register output
- name: Get status of apache2
  command: service apache2 status
  register: apache_server_status

- name: Display status
  debug:
    msg: "Status: {{ apache_server_status.stdout }}"

--------------------------


  