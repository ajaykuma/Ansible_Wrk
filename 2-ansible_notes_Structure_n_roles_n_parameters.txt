Ansible Project Structure:
----------------------
Ansible_Wrk
  Inventory
    vm-setup-playbook
      hosts.ini
  Roles
    python
      tasks
        main.yml
    README.MD
    setup-playbook.yml


hosts.ini > contains <ip addresses/hostnames> and details of machines/servers<ssh private keys>
Note** we can create multiple hosts file within Inventory directory

For every playbook we can have multiple roles and each role can have a task.
for example as shown above: main.yml file contains instructions to setup and install python and other relevant tasks.

setup-playbook.yml is the main ansible playbook and this will contain details pointing to hosts file and tasks file.
OR we could have one playbook which contains everything.

As per project structure above we would have:

main.yml
---
#- name: installing packages for python env
#  become: yes
#  apt:
#    name:
#      - python3-pip
#    update_cache: yes

- name: Create directory
  file:
    path: somepath
    state: directory

- name: install apache2
  become: yes
  apt: name=apache2 update_cache=yes state=latest

setup-playbook.yml
---
- name: Example ansible playbook
  hosts: all
  remote_user: ans
  roles:
   - python

Note**
Commonly used parameters
1. update_cache
Used with package managers like apt (Debian/Ubuntu).
It updates the package index/cache before installing a package.
Equivalent to running sudo apt update in a terminal.

This ensures that the package index is refreshed before installing any packages.
The update_cache: yes ensures apt update runs before installing Nginx.
This prevents issues where outdated repositories cause package installation failures.

2. become
Used to run tasks with elevated (root/sudo) privileges.
Equivalent to running sudo <command> in the terminal.
Required when performing system-level changes (e.g., installing packages, modifying system files).
The task runs as a normal user unless become: yes is set.
become: yes tells Ansible to use sudo.

3. state
Defines the desired state of a resource (package, service, file, etc.).
Common values:
present → Ensure it exists
absent → Ensure it is removed
started → Ensure service is running
stopped → Ensure service is stopped

--Installing a Package (present)
- name: Ensure Vim is installed
  apt:
    name: vim
    state: present

--Removing a Package (absent)
- name: Remove Apache
  apt:
    name: apache2
    state: absent

--Managing services
- name: Start and enable Nginx
  service:
    name: nginx
    state: started
    enabled: yes  # Ensures it starts on boot

------------------------------------------------
Other Important parameters used in playbooks:

4. name
Provides a description of the task.
Helps in understanding playbook execution logs.

- name: Ensure Nginx is installed
  apt:
    name: nginx
    state: present

5. with_items / loop
used to iterate over a list of values

--Example (Using loop)
- name: Install multiple packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - git
    - curl
    - unzip

--Example (Using with_items) (Older method, use loop if possible)
- name: Create multiple users
  user:
    name: "{{ item }}"
    state: present
  with_items:
    - alicia
    - bobie
    - charls

6. register
Stores the output of a command/task in a variable.

Example: Capture the hostname
- name: Get hostname
  command: hostname
  register: my_hostname

- name: Print hostname
  debug:
    msg: "The server's hostname is {{ my_hostname.stdout }}"

7. when
Defines a condition under which the task runs

Example: Install Apache only on Debian-based systems
- name: Install Apache on Debian
  apt:
    name: apache2
    state: present
  when: ansible_os_family == "Debian"

Example: Run a task only if a file exists
- name: Delete file if it exists
  file:
    path: /tmp/test.txt
    state: absent
  when: ansible_facts['os_family'] == "RedHat"

8. notify
Triggers a handler (a special task that runs when notified).

Example: Restart Nginx when configuration changes
- name: Copy Nginx config
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  notify: Restart Nginx

handlers:
  - name: Restart Nginx
    service:
      name: nginx
      state: restarted

9. ignore_errors
Allows a playbook to continue execution even if a task fails.

Example: Ignore errors when stopping a service
- name: Stop a non-existent service
  service:
    name: fake_service
    state: stopped
  ignore_errors: yes

 10. become_user
Runs a task as a specific user instead of root.

Example: Run a command as user deploy
- name: Run a script as deploy user
  command: /home/deploy/script.sh
  become: yes
  become_user: deploy

11. retries and delay
Used for retrying a task multiple times in case of failure.

Below, Retries 5 times with a 10-second gap between attempts.

Example: Retry service start if it fails
- name: Restart a service with retries
  service:
    name: my_service
    state: restarted
  register: result
  retries: 5
  delay: 10
  until: result is succeeded

12. with_file / with_fileglob
Reads a file's content and processes multiple files.

Example: Read and print the contents of a file
- name: Read a file's content
  slurp:
    src: /tmp/example.txt
  register: file_contents

- name: Print file contents
  debug:
    msg: "{{ file_contents['content'] | b64decode }}"

Example: Process multiple files
- name: Copy multiple config files
  copy:
    src: "{{ item }}"
    dest: /etc/configs/
  with_fileglob:
    - /home/user/configs/*.conf

13. changed_when
Controls when a task is marked as CHANGED.

Example: Avoid marking a command as CHANGED
- name: Check disk space
  command: df -h
  register: disk_space
  changed_when: false

Here, The task always runs, but Ansible won’t mark it as CHANGED.

14. tags
Used to run specific parts of a playbook.

Example: Assign tags to tasks
- name: Install Nginx
  apt:
    name: nginx
    state: present
  tags: webserver

- name: Install MySQL
  apt:
    name: mysql-server
    state: present
  tags: database

To run only the webserver tasks:
ansible-playbook myplaybook.yml --tags webserver

15. delegate_to
Runs a task on a different host instead of the target machine.

Example: Run a task on the control node
- name: Fetch data from an API on localhost
  uri:
    url: "https://api.example.com/data"
    method: GET
  delegate_to: localhost

Example: Copy files between remote servers
- name: Copy a file from one server to another
  copy:
    src: /home/user/file.txt
    dest: /tmp/file.txt
  delegate_to: other_server

====================================================
 

