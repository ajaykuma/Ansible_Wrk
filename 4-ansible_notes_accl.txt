Ansible provides various features to enhance automation efficiency, 
-- Accelerated Mode
-- Asynchronous Actions
-- Pooling
-- and Delegation.

Accelerated Mode: Ansible removed Accelerated Mode in version 2.4 due to security reasons and lack
of maintenance, instead we can use SSH multiplexing.

For accelerated mode :

Ansible’s Accelerated Mode reduces the overhead of SSH connections by using a persistent daemon
 on remote hosts.
Benefit: Speeds up execution by avoiding repetitive SSH connections.
Considerations:  Requires Python installed on the remote system and can be less secure than SSH.

Run Ansible with the --accelerated flag or enable it in the config file (/etc/ansible/ansible.cfg)
-------------------------------------------------------

Task 8: Using Ansible Accelerated Mode for Managing Hosts Behind a Firewall

Note** Ansible's Accelerated Mode can be useful when managing hosts behind a firewall, 
as it reduces SSH connection overhead and speeds up execution. It 
works by running a lightweight persistent daemon on the managed nodes, allowing faster communication.

Requirements:
--Ensure Python is installed on the remote hosts.
--Open the necessary firewall ports (default SSH or required ports for accelerated mode).
--Configure the control machine to use accelerated mode.

1. Enable Accelerated Mode in ansible.cfg
--Modify ansible.cfg in /etc/ansible

[defaults]
transport = accelerate
accelerate_port = 5099  # Default is 5099, change if needed
accelerate_multi_key = yes
accelerate_port: Port used by the accelerated mode.
accelerate_multi_key: Allows multiple SSH keys for authentication.

or it might be as follows:
[accelerate]
transport = accelerate
accelerate_port = 5099  # Default is 5099, change if needed
accelerate_timeout = 30
accelerate_connect_timeout = 5.0

# The daemon timeout is measured in minutes. This time is measured
# from the last activity to the accelerate daemon.
accelerate_daemon_timeout = 30

# If set to yes, accelerate_multi_key will allow multiple
# private keys to be uploaded to it, though each user must
# have access to the system via SSH to add a new key. The default
# is "no".
accelerate_multi_key = yes

2.  Create playbook to Manage Hosts Behind a Firewall: (refer: setup-using-accmod.yml)

3.  Run the playbook with Accelerated mode: (Note** accelerated mode is deprecated in new versions)
ansible-playbook -i Inventory/inventory.ini playbook.yml --accelerated --ask-become-pass

Note**
What we would need
  -- ansible.cfg to modify settings (if not existing in /etc/ansible then we can create it)
     (refer: 0_ansible_notes.txt)

  --Looking at default config settings and creating ansible.cfg
  <more details>

Create inventory.ini file 
[webservers]
web1 ansible_host=192.168.1.100 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
web2 ansible_host=192.168.1.101 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

[firewall_hosts]
firewall ansible_host=192.168.1.1 ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa

Note**
In the Ansible inventory (inventory.ini) , we have two groups:
[webservers] → Represents the actual servers (e.g., web servers) that Ansible will manage.
In our case m1 and m2.

[firewall_hosts] → Represents a firewall device that may need configuration to allow Ansible to 
communicate with web servers.
In our case lets say m1.

Why Grouping is good:

1. Separation of Responsibilities
webservers → These are the target machines where we install and configure Apache.
firewall_hosts → The firewall device may need specific rules (e.g., opening ports) to allow Ansible communication.
2. Managing the Firewall Separately
If the target hosts are behind a firewall, Ansible might first need to configure the firewall before managing 
the web servers.

Example:
Open SSH (22) and Ansible accelerated mode (5099) on the firewall.
Then execute tasks on web servers.

Note**
If UFW (Uncomplicated Firewall) is disabled on all hosts, the playbook will still work without errors 
but without any affect by the firewall-related tasks.

What Happens If UFW is Disabled? (as in our case)
The ufw module in Ansible does not enable UFW automatically.
If UFW is disabled, running ufw allow 22/tcp will not take effect until UFW is enabled.

The playbook will not fail, but the firewall rules won’t be enforced.
So, If you want firewall rules to take effect, you must first ensure UFW is enabled before applying rules.

5. To test on nodes, check if ufw is disabled. If so enable it and allow traffic for the accelerated mode.
sudo ufw allow 5099/tcp
sudo ufw allow 22/tcp

or via task in playbook such as:
    - name: Allow Ansible SSH and Accelerated Mode Port
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22
        - 5099

Steps to run this playbook:
--check if firewall is disabled on each node. (manually sudo ufw status) -- Not active
--check if apache2 is installed and running as service on each node --installed and running on m1, 
  not existing on m2.
--update inventory.ini file
--make sure ansible.cfg is updated.
--run playbook as 
ansible-playbook -i Inventory/inventory.ini Setup_tasks/setup-using-accmod.yml --accelerated 
--ask-become-pass 
(note** it may fail depending on your version)

SSH Multiplexing:
Since Accelerated Mode is deprecated, 
the best way to speed up Ansible execution is by enabling SSH control persist (multiplexing).

> Enable SSH Multiplexing in ansible.cfg

[ssh_connection]
ssh_args = -o ControlMaster=auto -o ControlPersist=600s
pipelining = True

Explaination:
ControlMaster=auto → Allows SSH multiplexing.
ControlPersist=600s → Keeps SSH connections open for 600 seconds to avoid reconnection delays.
pipelining=True → Reduces SSH command execution overhead.

--Now run ansible playbook without --accelerated option.
Note** No changes needed in inventory.ini file

SSH multiplexing works at the SSH client level, not in the inventory.
Ansible will automatically use the ssh_args settings from ansible.cfg.
The inventory file remains the same and continues to define hosts, usernames, and SSH keys.

We could enable SSH Multiplexing by modifying SSH config (~/.ssh/config):
Host *
    ControlMaster auto
    ControlPath ~/.ssh/mux-%r@%h:%p
    ControlPersist 10m

ControlMaster auto → Allows multiplexing if possible.
ControlPath ~/.ssh/mux-%r@%h:%p → Defines a socket file for connection reuse.
ControlPersist 10m → Keeps the connection open for 10 minutes after the last command.

The placeholders %r, %h, and %p are SSH escape sequences that get replaced dynamically when an 
SSH connection is established.

%r → Remote Username
Replaced by the username used for the SSH connection (e.g., ubuntu, root).

%h → Remote Host
Replaced by the hostname or IP address of the remote server.

%p → Remote Port
Replaced by the port number used for the connection (default is 22).

For example:
ssh -p 2222 ubuntu@192.168.1.100

The ControlPath would expand to:
~/.ssh/mux-ubuntu@192.168.1.100:2222

This unique filename ensures that SSH sessions for different users, hosts, or ports don’t conflict.

Task 8: Working with SSH multiplexing(earlier accelerated mode):
----------------------------------
ansible-playbook -i Inventory/inventory.ini Setup_tasks/setup-using-accmod.yml --ask-become-pass

--run playbook with -vvvv (for verbose output)

---output non verbose mode-----
PLAY [Manage hosts behind a firewall using accelerated mode] ****************************************************************

TASK [Gathering Facts] ******************************************************************************************************
ok: [web2]
ok: [web1]
ok: [firewall]

TASK [Ensure UFW is installed] **********************************************************************************************
ok: [web2]
ok: [web1]
ok: [firewall]

TASK [Enable UFW] ***********************************************************************************************************
ok: [web2]
ok: [firewall]
ok: [web1]

TASK [Allow Ansible SSH and Accelerated Mode Port] **************************************************************************
ok: [web2] => (item=22)
[WARNING]: The value 22 (type int) in a string field was converted to '22' (type string). If this does not look like what
you expect, quote the entire value to ensure it does not change.
ok: [firewall] => (item=22)
ok: [web1] => (item=22)

PLAY [Remove and Reinstall Apache on Web Servers] ***************************************************************************

TASK [Gathering Facts] ******************************************************************************************************
ok: [web2]
ok: [web1]

TASK [Stop Apache service if running] ***************************************************************************************
changed: [web2]
changed: [web1]

TASK [Remove Apache package] ************************************************************************************************
changed: [web1]
changed: [web2]

TASK [Install Apache] *******************************************************************************************************
changed: [web1]
changed: [web2]

TASK [Start Apache service] *************************************************************************************************
ok: [web2]
ok: [web1]

PLAY RECAP ******************************************************************************************************************
firewall                   : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
web1                       : ok=9    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
web2                       : ok=9    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

---output ends---
Checking If Multiplexing is Working
After an SSH session, check if a control socket is created:
ls ~/.ssh/mux-*

or manually entering a connection:
ssh -o ControlMaster=yes -o ControlPath=~/.ssh/mux-test user@remote

To check if SSH Multiplexing is working:
ssh -o ControlPath=~/.ssh/mux-%r@%h:%p ans@m1
ssh -o ControlPath=~/.ssh/mux-%r@%h:%p ans@m2

If the connection is fast on repeated attempts, SSH multiplexing is working.
If you see "Permission denied" or a slow connection, check ansible.cfg.

Break down of output when playbook run with -vvvv option:
1. Gathering Inventory Information

ansible-playbook -vvvv myplaybook.yml
Using /etc/ansible/ansible.cfg as config file

Ansible is using the configuration file located at /etc/ansible/ansible.cfg.

2. Establishing SSH Connection & Control Path
<ipaddress> ESTABLISH SSH CONNECTION FOR USER: ans
<paddress> SSH: EXEC ssh -o ControlMaster=auto -o ControlPersist=600s -o ControlPath=/home/user/.ansible/cp/ansible-ssh-ipaddress-22-ans

Ansible is establishing an SSH connection to ipaddress as user ans.
The ControlPath is part of SSH multiplexing:
It keeps SSH connections open and persistent (reduces re-authentication time).
The actual control socket file is stored at /home/user/.ansible/cp/.

3. Gathering Facts (System Information)
<ipaddress> ANSIBLE FACTS: SETUP MODULE

Ansible collects system facts about the target machine.
These facts include OS type, CPU, memory, network interfaces, etc.
You can access these values in your playbook using ansible_facts.

Fact Gathering helps Ansible decide OS-specific commands (e.g., Debian vs RedHat).

4. Running the apt Module to Install UFW
TASK [Ensure UFW is installed] ***
<ipaddress> EXEC /bin/sh -c 'DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y ufw'

The task "Ensure UFW is installed" is being executed.
Since this is a Debian-based system, Ansible uses apt-get install -y ufw.
The DEBIAN_FRONTEND=noninteractive prevents interactive prompts (ensures automation).
If UFW is already installed, this step will be skipped (unless force: yes is used).

5. Enabling UFW Firewall
TASK [Enable UFW] ***
<ipaddress> EXEC /bin/sh -c 'ufw enable'

Ansible is enabling the firewall using ufw enable.
If UFW was already enabled, this task does nothing.

6. Allowing Firewall Rules for SSH
TASK [Allow SSH port in UFW] ***
<ipaddress> EXEC /bin/sh -c 'ufw allow 22/tcp'

Ansible is opening port 22 to allow SSH access.
This ensures that after enabling the firewall, SSH connections don’t get blocked.
Good to do: before enabling UFW is running ufw allow OpenSSH to avoid losing SSH access.

7. Stopping and Removing Apache
TASK [Stop Apache service if running] ***
<ipaddress> EXEC /bin/sh -c 'service apache2 stop'

Ansible tries to stop the apache2 service.
If Apache is not installed, it ignores errors (ignore_errors: yes).

Removing Apache:
TASK [Remove Apache package] ***
<ipaddress> EXEC /bin/sh -c 'apt-get remove -y apache2 && apt-get purge -y apache2'

Apache is being completely uninstalled and purged from the system.
The purge: yes ensures config files are also deleted.

8. Installing Apache (If on Debian)
TASK [Install Apache (only on Debian-based systems)] ***
skipping: [ip] => (item=None) 
<ip> EXEC /bin/sh -c 'apt-get install -y apache2'

Ansible checks if ansible_os_family == "Debian".
If true, it installs Apache using apt-get install -y apache2.

9. Starting Apache Service
TASK [Start Apache service (only on Debian-based systems)] ***
<ip> EXEC /bin/sh -c 'service apache2 start'

Apache is started using service apache2 start.
The enabled: yes ensures it starts on boot.

10. Creating a Test File
TASK [Create a test file] ***
<ip> EXEC /bin/sh -c 'echo "This is a test file for testing Ansible execution" > /tmp/testfile.txt'

Ansible creates the file /tmp/testfile.txt with the specified content.

Conclusion:
SSH Multiplexing (ControlPath) improves performance by reusing SSH connections.
Fact Gathering helps Ansible determine system details (like OS type).
Each task execution is logged step-by-step, showing what Ansible runs on the remote host.
Play Recap at the end summarizes successes and failures.


