AWX Project Testing in Ansible
----------------------------
AWX is an open-source project that provides a web-based user interface, REST API, and task engine for Ansible. 
It serves as the upstream project for Red Hat Ansible Automation Platform (AAP). 
In the context of project testing in AWX, this typically refers to verifying Ansible playbooks, 
roles, and collections within an AWX project.

In AWX, a Project is a logical grouping of Ansible playbooks and roles, usually sourced from a Git repository, SVN, 
or a file-based location. Testing an AWX project ensures that these playbooks run c
orrectly and perform the desired automation tasks without errors.

Types of Testing in AWX Projects

--Playbook Syntax Testing
  Before running a playbook in AWX, you can use ansible-playbook --syntax-check to verify that the YAML 
  structure and syntax are correct.

--Linting (Code Quality Check)
  Use ansible-lint to check for best practices and common mistakes in playbooks before running them in AWX.

--Dry Run / Check Mode
  Run the playbook in check mode (--check) to simulate execution without making changes.

--Unit Testing with Molecule
  If your project includes Ansible roles, use Molecule to test them in an isolated environment before execution in AWX.

--Integration Testing
  Run the playbook in an AWX Job Template against a test environment before deploying to production.

--Idempotency Testing
  Run the same playbook multiple times to ensure that it doesn’t make unnecessary changes when re-executed.

--Validation of Inventory and Credentials
  Ensure that AWX has the correct inventory, credentials, and permissions to execute the playbooks properly.

--We can create a workflow template in AWX to run test jobs before deploying playbooks.
--We can use pre-run hooks or Git webhooks to trigger automated testing when changes are pushed to the repository.

AWX (Ansible Tower Community Edition)
AWX is the open-source version of Ansible Tower that provides a web-based interface, REST API, 
and task engine for managing Ansible automation.

AWX installation:

--Using Docker (AWX Operator - Recommended)

--Using Kubernetes (Minikube/OpenShift)

--Using a Traditional Ansible Playbook

--Using Docker
sudo apt update && sudo apt install -y \
    python3-pip \
    git \
    ansible \
    docker.io \
    docker-compose

sudo systemctl start docker
sudo systemctl enable docker

sudo git clone https://github.com/ansible/awx.git

#Install the AWX Operator
    git clone https://github.com/ansible/awx-operator.git
    cd awx-operator

    #Install operator using ansible
    ansible-playbook -i inventory install.yml
    
    #Apply AWX configuration
    kubectl apply -f awx-deployment.yml

    #or using docker-compose
    docker-compose up -d

    #Check AWX status
    kubectl get pods -n awx
    or
    docker ps

#Access web UI 
http://localhost:8052

user: admin
for password:
kubectl get secret awx-admin-password -o jsonpath="{.data.password}" | base64 --decode

--Using Ansible playbook
git clone https://github.com/ansible/awx.git
cd awx
ansible-playbook -i inventory install.yml

------------------------------------------------------------------------
AWX workflow template:
A workflow template in AWX allows you to create a sequence of job templates, 
which can be used for testing Ansible playbooks before deploying them. 

--Create a test playbook:
--Upload the Playbook to a Git Repository
  AWX pulls playbooks from a source control system like GitHub, GitLab, or Bitbucket.

--Create a Project in AWX
1.Go to AWX Dashboard → Projects
2.Click Add (+) → Fill in the details:

    Name: Ansible Testing Project
    Source Control Type: Git
    SCM URL: <your-git-repo-url>
    SCM Update Options: Enable Update on Launch
Click Save

--Create a Job Template for Testing
1.Go to Templates → Click Add (+) → Choose Job Template
2.Fill in the details:

    Name: Test Ansible Playbooks
    Job Type: Run
    Inventory: Choose a test inventory
    Project: Ansible Testing Project
    Playbook: test_playbook.yml

Credentials: Set SSH credentials if needed
Click Save

--Create a Workflow Template
1.Go to Templates → Click Add (+) → Choose Workflow Template
2.Enter the Name: AWX Test Workflow
Click Save

Now, add jobs to the workflow:
3.Click Edit Workflow Visualizer
4.Click Start Node (+) → Add a Job Template

Select Test Ansible Playbooks
Click Save
5.Optionally, add another job (e.g., Linting or Deployment).
Click Save

Run the Workflow
1.Go to Templates
2.Click AWX Test Workflow
3.Click Launch

We can also:
Automate with Webhooks
If using GitHub/GitLab, you can set up webhooks to trigger AWX workflows automatically when a commit is pushed.

1.Go to Projects → Select your project
2.Enable Webhook Integration (GitHub/GitLab)
3.Copy the webhook URL and add it to your GitHub repo settings under Webhooks
4.Push a new commit, and AWX will automatically test the playbook!

