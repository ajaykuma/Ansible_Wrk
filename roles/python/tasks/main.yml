---
# - name: Setup Python Virtual Environment with Verification
#   hosts: all
#   become: yes
#   tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - python3.8 # Change to your desired version
          - python3.8-venv
          - python3.8-distutils
          - python3-pip
        state: present
      when: ansible_os_family == "Debian"

    #- name: Ensure required packages are installed
    #  yum:
    #    name:
    #      - python3.10  # Change to your desired version
    #      - python3-pip
    #    state: present
    #  when: ansible_os_family == "RedHat"

    - name: Create a directory for the virtual environment
      file:
        path: /opt/my_venv
        state: directory
        mode: '0755'

    - name: Create Python virtual environment with specific version
      command: /usr/bin/python3.8 -m venv /opt/my_venv
      args:
        creates: /opt/my_venv/bin/activate
    
    #command to activate venv in linux is : source /opt/my_venv/bin/activate (to manually check)
    #command to deactivate when in venv: (my_venv) ans@m2:/$ deactivate

    - name: Upgrade pip in virtual environment
      command: /opt/my_venv/bin/pip install --upgrade pip

    - name: Check Python version in virtual environment
      command: /opt/my_venv/bin/python --version
      register: python_version_output

    - name: Check Pip version in virtual environment
      command: /opt/my_venv/bin/pip --version
      register: pip_version_output

    - name: List installed packages in virtual environment
      command: /opt/my_venv/bin/pip list
      register: pip_list_output
    
    - name: Upgrade pip in virtual environment
      command: /opt/my_venv/bin/pip install pandas

    - name: List installed packages in virtual environment again
      command: /opt/my_venv/bin/pip list
      register: pip_list_output2

    - name: Display Python version
      debug:
        msg: "Python Version: {{ python_version_output.stdout }}"

    - name: Display Pip version
      debug:
        msg: "Pip Version: {{ pip_version_output.stdout }}"

    - name: Display installed packages
      debug:
        msg: "Installed Packages:{{ pip_list_output.stdout }}"
    
    - name: Display installed packages again
      debug:
        msg: "{{ item }}"
      loop: "{{ pip_list_output2.stdout_lines }}"
    
    - name: Extract and display package names and versions
      debug:
        msg: "{{ item.split()[:2] | join(' - ') }}"
      loop: "{{ pip_list_output2.stdout_lines[2:] }}"  # Skipping header lines
      loop_control:
        label: ""  # Removes "(item=...)" from the output
